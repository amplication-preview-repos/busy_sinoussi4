/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { GuestAttendance } from "./GuestAttendance";
import { GuestAttendanceCountArgs } from "./GuestAttendanceCountArgs";
import { GuestAttendanceFindManyArgs } from "./GuestAttendanceFindManyArgs";
import { GuestAttendanceFindUniqueArgs } from "./GuestAttendanceFindUniqueArgs";
import { CreateGuestAttendanceArgs } from "./CreateGuestAttendanceArgs";
import { UpdateGuestAttendanceArgs } from "./UpdateGuestAttendanceArgs";
import { DeleteGuestAttendanceArgs } from "./DeleteGuestAttendanceArgs";
import { Guest } from "../../guest/base/Guest";
import { GuestAttendanceService } from "../guestAttendance.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => GuestAttendance)
export class GuestAttendanceResolverBase {
  constructor(
    protected readonly service: GuestAttendanceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "GuestAttendance",
    action: "read",
    possession: "any",
  })
  async _guestAttendancesMeta(
    @graphql.Args() args: GuestAttendanceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [GuestAttendance])
  @nestAccessControl.UseRoles({
    resource: "GuestAttendance",
    action: "read",
    possession: "any",
  })
  async guestAttendances(
    @graphql.Args() args: GuestAttendanceFindManyArgs
  ): Promise<GuestAttendance[]> {
    return this.service.guestAttendances(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => GuestAttendance, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "GuestAttendance",
    action: "read",
    possession: "own",
  })
  async guestAttendance(
    @graphql.Args() args: GuestAttendanceFindUniqueArgs
  ): Promise<GuestAttendance | null> {
    const result = await this.service.guestAttendance(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GuestAttendance)
  @nestAccessControl.UseRoles({
    resource: "GuestAttendance",
    action: "create",
    possession: "any",
  })
  async createGuestAttendance(
    @graphql.Args() args: CreateGuestAttendanceArgs
  ): Promise<GuestAttendance> {
    return await this.service.createGuestAttendance({
      ...args,
      data: {
        ...args.data,

        guest: args.data.guest
          ? {
              connect: args.data.guest,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => GuestAttendance)
  @nestAccessControl.UseRoles({
    resource: "GuestAttendance",
    action: "update",
    possession: "any",
  })
  async updateGuestAttendance(
    @graphql.Args() args: UpdateGuestAttendanceArgs
  ): Promise<GuestAttendance | null> {
    try {
      return await this.service.updateGuestAttendance({
        ...args,
        data: {
          ...args.data,

          guest: args.data.guest
            ? {
                connect: args.data.guest,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => GuestAttendance)
  @nestAccessControl.UseRoles({
    resource: "GuestAttendance",
    action: "delete",
    possession: "any",
  })
  async deleteGuestAttendance(
    @graphql.Args() args: DeleteGuestAttendanceArgs
  ): Promise<GuestAttendance | null> {
    try {
      return await this.service.deleteGuestAttendance(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Guest, {
    nullable: true,
    name: "guest",
  })
  @nestAccessControl.UseRoles({
    resource: "Guest",
    action: "read",
    possession: "any",
  })
  async getGuest(
    @graphql.Parent() parent: GuestAttendance
  ): Promise<Guest | null> {
    const result = await this.service.getGuest(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
